package ecologylab.semantics.generated.library.ted;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2012) Interface Ecology Lab.
 */

import ecologylab.semantics.generated.library.ted.SpeakerType;
import ecologylab.semantics.generated.library.ted.TalkType;
import ecologylab.semantics.metadata.builtins.CompoundDocument;
import ecologylab.semantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.semantics.metadata.mm_name;
import ecologylab.semantics.metadata.scalar.MetadataString;
import ecologylab.semantics.metametadata.MetaMetadataCompositeField;
import ecologylab.semantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_inherit;
import ecologylab.serialization.annotations.simpl_scalar;
import ecologylab.serialization.annotations.simpl_tag;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/** 
 *Speaker type class
 */ 
@simpl_inherit
public class SpeakerType extends CompoundDocument
{
	/** 
	 *Introuduction and work
	 */ 
	@simpl_scalar
	@simpl_tag("Why_you_shoul_listen_to_him")
	private MetadataString WhyYouShoulListenToHim;

	/** 
	 *Quotes by this speaker
	 */ 
	@simpl_collection("talk_type")
	@simpl_tag("Quotes_by_this_speaker")
	@mm_name("Quotes_by_this_speaker")
	private List<TalkType> QuotesByThisSpeaker;

	/** 
	 *Talks by this speaker
	 */ 
	@simpl_collection("talk_type")
	@simpl_tag("Talks")
	@mm_name("Talks")
	private List<TalkType> Talks;

	/** 
	 *This speaker on the web
	 */ 
	@simpl_collection("compound_document")
	@simpl_tag("On_the_web")
	@mm_name("On_the_web")
	private List<CompoundDocument> OnTheWeb;

	/** 
	 *Related speakers
	 */ 
	@simpl_collection("speaker_type")
	@simpl_tag("Related_speakers")
	@mm_name("Related_speakers")
	private List<SpeakerType> RelatedSpeakers;

	/** 
	 *Related themes
	 */ 
	@simpl_collection("speaker_type")
	@simpl_tag("Related_themes")
	@mm_name("Related_themes")
	private List<SpeakerType> RelatedThemes;

	/** 
	 *Conferences
	 */ 
	@simpl_collection("compound_document")
	@simpl_tag("Conferences")
	@mm_name("Conferences")
	private List<CompoundDocument> Conferences;

	public SpeakerType()
	{ super(); }

	public SpeakerType(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public MetadataString	WhyYouShoulListenToHim()
	{
		MetadataString	result = this.WhyYouShoulListenToHim;
		if (result == null)
		{
			result = new MetadataString();
			this.WhyYouShoulListenToHim = result;
		}
		return result;
	}

	public String getWhyYouShoulListenToHim()
	{
		return this.WhyYouShoulListenToHim == null ? null : WhyYouShoulListenToHim().getValue();
	}

	public MetadataString getWhyYouShoulListenToHimMetadata()
	{
		return WhyYouShoulListenToHim;
	}

	public void setWhyYouShoulListenToHim(String WhyYouShoulListenToHim)
	{
		if (WhyYouShoulListenToHim != null)
			this.WhyYouShoulListenToHim().setValue(WhyYouShoulListenToHim);
	}

	public void setWhyYouShoulListenToHimMetadata(MetadataString WhyYouShoulListenToHim)
	{
		this.WhyYouShoulListenToHim = WhyYouShoulListenToHim;
	}

	public List<TalkType> getQuotesByThisSpeaker()
	{
		return QuotesByThisSpeaker;
	}

  // lazy evaluation:
  public List<TalkType> QuotesByThisSpeaker()
  {
    if (QuotesByThisSpeaker == null)
      QuotesByThisSpeaker = new ArrayList<TalkType>();
    return QuotesByThisSpeaker;
  }

  // addTo:
  public void addToQuotesByThisSpeaker(TalkType element)
  {
    QuotesByThisSpeaker().add(element);
  }

  // size:
  public int QuotesByThisSpeakerSize()
  {
    return QuotesByThisSpeaker == null ? 0 : QuotesByThisSpeaker.size();
  }

	public void setQuotesByThisSpeaker(List<TalkType> QuotesByThisSpeaker)
	{
		this.QuotesByThisSpeaker = QuotesByThisSpeaker;
	}

	public List<TalkType> getTalks()
	{
		return Talks;
	}

  // lazy evaluation:
  public List<TalkType> Talks()
  {
    if (Talks == null)
      Talks = new ArrayList<TalkType>();
    return Talks;
  }

  // addTo:
  public void addToTalks(TalkType element)
  {
    Talks().add(element);
  }

  // size:
  public int TalksSize()
  {
    return Talks == null ? 0 : Talks.size();
  }

	public void setTalks(List<TalkType> Talks)
	{
		this.Talks = Talks;
	}

	public List<CompoundDocument> getOnTheWeb()
	{
		return OnTheWeb;
	}

  // lazy evaluation:
  public List<CompoundDocument> OnTheWeb()
  {
    if (OnTheWeb == null)
      OnTheWeb = new ArrayList<CompoundDocument>();
    return OnTheWeb;
  }

  // addTo:
  public void addToOnTheWeb(CompoundDocument element)
  {
    OnTheWeb().add(element);
  }

  // size:
  public int OnTheWebSize()
  {
    return OnTheWeb == null ? 0 : OnTheWeb.size();
  }

	public void setOnTheWeb(List<CompoundDocument> OnTheWeb)
	{
		this.OnTheWeb = OnTheWeb;
	}

	public List<SpeakerType> getRelatedSpeakers()
	{
		return RelatedSpeakers;
	}

  // lazy evaluation:
  public List<SpeakerType> RelatedSpeakers()
  {
    if (RelatedSpeakers == null)
      RelatedSpeakers = new ArrayList<SpeakerType>();
    return RelatedSpeakers;
  }

  // addTo:
  public void addToRelatedSpeakers(SpeakerType element)
  {
    RelatedSpeakers().add(element);
  }

  // size:
  public int RelatedSpeakersSize()
  {
    return RelatedSpeakers == null ? 0 : RelatedSpeakers.size();
  }

	public void setRelatedSpeakers(List<SpeakerType> RelatedSpeakers)
	{
		this.RelatedSpeakers = RelatedSpeakers;
	}

	public List<SpeakerType> getRelatedThemes()
	{
		return RelatedThemes;
	}

  // lazy evaluation:
  public List<SpeakerType> RelatedThemes()
  {
    if (RelatedThemes == null)
      RelatedThemes = new ArrayList<SpeakerType>();
    return RelatedThemes;
  }

  // addTo:
  public void addToRelatedThemes(SpeakerType element)
  {
    RelatedThemes().add(element);
  }

  // size:
  public int RelatedThemesSize()
  {
    return RelatedThemes == null ? 0 : RelatedThemes.size();
  }

	public void setRelatedThemes(List<SpeakerType> RelatedThemes)
	{
		this.RelatedThemes = RelatedThemes;
	}

	public List<CompoundDocument> getConferences()
	{
		return Conferences;
	}

  // lazy evaluation:
  public List<CompoundDocument> Conferences()
  {
    if (Conferences == null)
      Conferences = new ArrayList<CompoundDocument>();
    return Conferences;
  }

  // addTo:
  public void addToConferences(CompoundDocument element)
  {
    Conferences().add(element);
  }

  // size:
  public int ConferencesSize()
  {
    return Conferences == null ? 0 : Conferences.size();
  }

	public void setConferences(List<CompoundDocument> Conferences)
	{
		this.Conferences = Conferences;
	}
}
